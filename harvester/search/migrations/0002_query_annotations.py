# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-06-26 10:40
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('pol_harvester', '0009_annotation_text'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('search', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Query',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(db_index=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'queries',
            },
        ),
        migrations.CreateModel(
            name='QueryRanking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subquery', models.CharField(db_index=True, max_length=255)),
                ('ranking', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('is_approved', models.NullBooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('freeze', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pol_harvester.Freeze')),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.Query')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='query',
            name='users',
            field=models.ManyToManyField(through='search.QueryRanking', to=settings.AUTH_USER_MODEL),
        ),
    ]
