version: '3.7'

services:
  loadbalancer:
    image: traefik:v2.0
    command:
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443

      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=pol-harvester_webnet
      - --providers.docker.swarmMode=true

      - --certificatesResolvers.default.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.default.acme.storage=acme.json
      - --certificatesResolvers.default.acme.httpChallenge.entryPoint=web
      - --certificatesresolvers.default.acme.tlschallenge=true

      - --accesslog=true
      - --accesslog.format=json
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.headers.defaultmode=keep
      - --accesslog.fields.names.ClientAddr=redact
      - --accesslog.fields.names.ClientHost=redact
      - --accesslog.fields.names.ClientPort=redact
      - --accesslog.fields.names.ClientUsername=redact
      - --accesslog.fields.headers.names.Referer=redact
      - --accesslog.fields.headers.names.User-Agent=redact

    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/etc/traefik/acme
    networks:
      - webnet
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        delay: 60s
        max_attempts: 0
        window: 0s
      labels:
        - "treafik.enable=true"
        # global redirect to https
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

        # middleware redirect
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  harvester:
    image: registry.surfedu.nl/edu/pol-harvester:latest
    command: uwsgi --ini /usr/src/app/uwsgi.ini
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=pol-harvester_webnet"
        - "traefik.http.services.harvester.loadbalancer.server.port=8000"
        - "traefik.http.routers.harvester.rule=Host(`${HARVESTER_HOSTNAME}`)"
        - "traefik.http.routers.harvester.entrypoints=websecure"
        - "traefik.http.routers.harvester.tls=true"
        - "traefik.http.routers.harvester.tls.certresolver=default"
        - "traefik.http.middlewares.harvester.ipwhitelist.sourcerange=${HARVESTER_IP_WHITELIST}"
    networks:
      - webnet
      - default
    healthcheck:
      test: curl -sS http://localhost:8000/health || exit 1
      interval: 5s
      timeout: 10s
      retries: 3

  postgres:
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "2"
          memory: 2G
      restart_policy:
        condition: on-failure

  redis:
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure

  tasks:
    image: registry.surfedu.nl/edu/pol-harvester:latest
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "4"
          memory: 10G
      restart_policy:
        condition: on-failure
    volumes:
     - /home/surf/kaldi:/home/surf/kaldi
     - /home/surf/Kaldi_NL:/home/surf/Kaldi_NL

  adminer:  # kills adminer in production, but the port should also be closed by the firewall
    command: "true"
    entrypoint: "true"
    deploy:
      restart_policy:
        condition: none

  metabase:
    image: metabase/metabase
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - metabase-data:/metabase-data
    environment:
      - MB_DB_FILE=/metabase-data/metabase.db
      - JAVA_TIMEZONE=Europe/Amsterdam
    ports:
      - 3000:3000

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.3
    environment:
      - node.name=elastic
      - discovery.type=single-node
      - cluster.name=elastic
      - xpack.security.enabled=true
      #- xpack.security.transport.ssl.enabled=true
      - xpack.security.audit.enabled=true
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - network.host=0.0.0.0
      - http.cors.enabled=true
      - http.cors.allow-origin=https://surfpol.nl
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - default
      - webnet
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
        window: 0s
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=pol-harvester_webnet"
        - "traefik.http.services.elastic.loadbalancer.server.port=9200"
        - "traefik.http.routers.elastic.rule=Host(`${ELASTIC_HOSTNAME}`)"
        - "traefik.http.routers.elastic.entrypoints=websecure"
        - "traefik.http.routers.elastic.tls=true"
        - "traefik.http.routers.elastic.tls.certresolver=default"
        - "traefik.http.middlewares.elastic.ipwhitelist.sourcerange=${ELASTIC_IP_WHITELIST}"
    ports:
      - 9200:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:6.8.3
    environment:
      SERVER_NAME: "${KIBANA_HOSTNAME}"
      ELASTICSEARCH_HOSTS: "${ELASTIC_SEARCH_URL}"
      ELASTICSEARCH_USERNAME: "${ELASTIC_KIBANA_USERNAME}"
      ELASTICSEARCH_PASSWORD: "${ELASTIC_KIBANA_PASSWORD}"
    networks:
      - webnet
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=pol-harvester_webnet"
        - "traefik.http.services.kibana.loadbalancer.server.port=5601"
        - "traefik.http.routers.kibana.rule=Host(`${KIBANA_HOSTNAME}`)"
        - "traefik.http.routers.kibana.entrypoints=websecure"
        - "traefik.http.routers.kibana.tls=true"
        - "traefik.http.routers.kibana.tls.certresolver=default"
        - "traefik.http.middlewares.kibana.ipwhitelist.sourcerange=${KIBANA_IP_WHITELIST}"
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
        window: 0s

volumes:
  postgres-data:
  metabase-data:
  elastic-data:
  traefik-data:

networks:
  webnet:
